# docker-compose.dev.yml
# Development configuration with exposed ports for debugging and local access
#
# Usage:
#   docker compose -f docker-compose.dev.yml up -d
#
# Features:
#   - All ports exposed for direct access
#   - Database accessible at localhost:5432
#   - App accessible at localhost:3000 (direct) and localhost:8080 (via nginx)
#   - Hot reload support
#   - Detailed logging

version: '3.8'

services:
  # 1. Next.js Application Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ids_portal_app_dev
    restart: unless-stopped
    ports:
      - "3000:3000"  # Direct access to Next.js for debugging
    env_file:
      - .env.production
    environment:
      - NODE_ENV=development
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      # Mount source code for hot reload (optional - uncomment if needed)
      # - ./src:/app/src:ro
      # - ./public:/app/public:ro
      - /app/node_modules
      - /app/.next

  # 2. PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    container_name: ids_portal_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"  # Exposed for direct access (psql, pgAdmin, etc.)
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # 3. Nginx Reverse Proxy (Optional - for testing proxy setup)
  nginx:
    image: nginx:1.25-alpine
    container_name: ids_portal_proxy_dev
    restart: unless-stopped
    ports:
      - "8080:80"   # HTTP access via proxy
      - "8443:443"  # HTTPS access via proxy
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - app
    networks:
      - app-network

# Volumes
volumes:
  postgres_data_dev:
    driver: local

# Networks
networks:
  app-network:
    driver: bridge
